// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AccountingNET.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class MacroFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Macro", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Macro")))
            {
                AccountingNET.Tests.Features.MacroFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table1.AddRow(new string[] {
                        "Name",
                        "MyLedger"});
            table1.AddRow(new string[] {
                        "Depth",
                        "3"});
            testRunner.Given("I create a ledger \"L\" with the properties", ((string)(null)), table1, "Given ");
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Ledger",
                        "Label"});
            table2.AddRow(new string[] {
                        "100",
                        "MyLedger",
                        "Account 100"});
            table2.AddRow(new string[] {
                        "200",
                        "MyLedger",
                        "Account 200"});
            table2.AddRow(new string[] {
                        "300",
                        "MyLedger",
                        "Account 300"});
            testRunner.And("I create multiple TAccounts", ((string)(null)), table2, "And ");
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Macro - Create a macro - NF")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Macro")]
        public virtual void Macro_CreateAMacro_NF()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Macro - Create a macro - NF", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            this.FeatureBackground();
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table3.AddRow(new string[] {
                        "Name",
                        "Macro1"});
            table3.AddRow(new string[] {
                        "Description",
                        "My description"});
            table3.AddRow(new string[] {
                        "Script",
                        "my script"});
            testRunner.When("I create a macro \"M\" with the properties", ((string)(null)), table3, "When ");
            testRunner.Then("I receive this ok message: \"Macro.Created.Ok\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        public virtual void Macro_CreateAMacro_MandatoryPropertiesMissing(string description, string name, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Macro - Create a macro - Mandatory properties missing", exampleTags);
            this.ScenarioSetup(scenarioInfo);
            this.FeatureBackground();
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table4.AddRow(new string[] {
                        "Name",
                        string.Format("{0}", name)});
            testRunner.When("I create a macro \"M\" with the properties", ((string)(null)), table4, "When ");
            testRunner.Then(string.Format("I receive this error message: \"{0}\"", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Macro - Create a macro - Mandatory properties missing: Name")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Macro")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Name")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "Name")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Name", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Message", "Macro.Name.Empty")]
        public virtual void Macro_CreateAMacro_MandatoryPropertiesMissing_Name()
        {
            this.Macro_CreateAMacro_MandatoryPropertiesMissing("Name", "", "Macro.Name.Empty", ((string[])(null)));
        }
        
        public virtual void Macro_DefineScript_HardCodedValue(string description, string input, string output, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Macro - Define script - Hard coded value", exampleTags);
            this.ScenarioSetup(scenarioInfo);
            this.FeatureBackground();
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table5.AddRow(new string[] {
                        "Name",
                        "Macro1"});
            testRunner.Given("I create a macro \"M\" with the properties", ((string)(null)), table5, "Given ");
            testRunner.And("I update the script of the macro \"M\" to", string.Format("def __main():\r\n\treturn {0}\r\n#enddef", input), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.When("I execute the macro \"M\" on ledger \"L\" into result \"MR\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then(string.Format("the macro result \"MR\" is \"{0}\"", output), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Macro - Define script - Hard coded value: String")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Macro")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "String")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "String")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Input", "\'20\'")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Output", "20")]
        public virtual void Macro_DefineScript_HardCodedValue_String()
        {
            this.Macro_DefineScript_HardCodedValue("String", "\'20\'", "20", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Macro - Define script - Hard coded value: String (Concat)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Macro")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "String (Concat)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "String (Concat)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Input", "\'20\' + \'20\'")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Output", "2020")]
        public virtual void Macro_DefineScript_HardCodedValue_StringConcat()
        {
            this.Macro_DefineScript_HardCodedValue("String (Concat)", "\'20\' + \'20\'", "2020", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Macro - Define script - Hard coded value: Int")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Macro")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Int")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "Int")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Input", "20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Output", "20")]
        public virtual void Macro_DefineScript_HardCodedValue_Int()
        {
            this.Macro_DefineScript_HardCodedValue("Int", "20", "20", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Macro - Define script - Hard coded value: Int (Add)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Macro")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Int (Add)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "Int (Add)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Input", "20 + 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Output", "21")]
        public virtual void Macro_DefineScript_HardCodedValue_IntAdd()
        {
            this.Macro_DefineScript_HardCodedValue("Int (Add)", "20 + 1", "21", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Macro - Define script - Hard coded value: Int (Substract)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Macro")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Int (Substract)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "Int (Substract)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Input", "20 - 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Output", "19")]
        public virtual void Macro_DefineScript_HardCodedValue_IntSubstract()
        {
            this.Macro_DefineScript_HardCodedValue("Int (Substract)", "20 - 1", "19", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Macro - Define script - Hard coded value: Int (Multiply)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Macro")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Int (Multiply)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "Int (Multiply)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Input", "2 * 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Output", "6")]
        public virtual void Macro_DefineScript_HardCodedValue_IntMultiply()
        {
            this.Macro_DefineScript_HardCodedValue("Int (Multiply)", "2 * 3", "6", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Macro - Define script - Hard coded value: Int (Divide)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Macro")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Int (Divide)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "Int (Divide)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Input", "10 / 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Output", "2")]
        public virtual void Macro_DefineScript_HardCodedValue_IntDivide()
        {
            this.Macro_DefineScript_HardCodedValue("Int (Divide)", "10 / 5", "2", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Macro - Define script - Hard coded value: Decimal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Macro")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Decimal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "Decimal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Input", "10.50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Output", "10.50")]
        public virtual void Macro_DefineScript_HardCodedValue_Decimal()
        {
            this.Macro_DefineScript_HardCodedValue("Decimal", "10.50", "10.50", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Macro - Define script - Hard coded value: Decimal (Add)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Macro")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Decimal (Add)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "Decimal (Add)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Input", "10.50 + 0.50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Output", "11.00")]
        public virtual void Macro_DefineScript_HardCodedValue_DecimalAdd()
        {
            this.Macro_DefineScript_HardCodedValue("Decimal (Add)", "10.50 + 0.50", "11.00", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Macro - Define script - Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Macro")]
        public virtual void Macro_DefineScript_Parameters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Macro - Define script - Parameters", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            this.FeatureBackground();
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table6.AddRow(new string[] {
                        "Name",
                        "Macro1"});
            testRunner.Given("I create a macro \"M\" with the properties", ((string)(null)), table6, "Given ");
            testRunner.And("I update the script of the macro \"M\" to", "def __main():\r\n\treturn __X__ + __Y__\r\n#enddef", ((TechTalk.SpecFlow.Table)(null)), "And ");
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table7.AddRow(new string[] {
                        "X",
                        "10.00"});
            table7.AddRow(new string[] {
                        "Y",
                        "5.00"});
            testRunner.When("I execute the macro \"M\" on ledger \"L\" into result \"MR\" with parameters", ((string)(null)), table7, "When ");
            testRunner.Then("the macro result \"MR\" is \"15.00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Macro - Define script - Call another macro")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Macro")]
        public virtual void Macro_DefineScript_CallAnotherMacro()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Macro - Define script - Call another macro", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            this.FeatureBackground();
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table8.AddRow(new string[] {
                        "Name",
                        "Macro1"});
            testRunner.Given("I create a macro \"M\" with the properties", ((string)(null)), table8, "Given ");
            testRunner.And("I update the script of the macro \"M\" to", "def __main():\r\n\treturn 10.00\r\n#enddef", ((TechTalk.SpecFlow.Table)(null)), "And ");
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table9.AddRow(new string[] {
                        "Name",
                        "Macro2"});
            testRunner.And("I create a macro \"M2\" with the properties", ((string)(null)), table9, "And ");
            testRunner.And("I update the script of the macro \"M2\" to", "def __main():\r\n\treturn _macro.call(\'Macro1\')\r\n#enddef", ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.When("I execute the macro \"M2\" on ledger \"L\" into result \"MR\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("the macro result \"MR\" is \"10.00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Macro - Define script - Call another macro with parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Macro")]
        public virtual void Macro_DefineScript_CallAnotherMacroWithParameters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Macro - Define script - Call another macro with parameters", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            this.FeatureBackground();
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table10.AddRow(new string[] {
                        "Name",
                        "Macro1"});
            testRunner.Given("I create a macro \"M\" with the properties", ((string)(null)), table10, "Given ");
            testRunner.And("I update the script of the macro \"M\" to", "def __main():\r\n\treturn __X__ + __Y__\r\n#enddef", ((TechTalk.SpecFlow.Table)(null)), "And ");
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table11.AddRow(new string[] {
                        "Name",
                        "Macro2"});
            testRunner.And("I create a macro \"M2\" with the properties", ((string)(null)), table11, "And ");
            testRunner.And("I update the script of the macro \"M2\" to", "def __main():\r\n\treturn _macro.call(\'Macro1\', { \'X\':\'10.00\', \'Y\':\'5.00\' })\r\n#endde" +
                    "f", ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.When("I execute the macro \"M2\" on ledger \"L\" into result \"MR\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("the macro result \"MR\" is \"15.00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Macro - Define script - Call another macro with parameters - forward parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Macro")]
        public virtual void Macro_DefineScript_CallAnotherMacroWithParameters_ForwardParameters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Macro - Define script - Call another macro with parameters - forward parameters", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            this.FeatureBackground();
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table12.AddRow(new string[] {
                        "Name",
                        "Macro1"});
            testRunner.Given("I create a macro \"M\" with the properties", ((string)(null)), table12, "Given ");
            testRunner.And("I update the script of the macro \"M\" to", "def __main():\r\n\treturn __X__ + __Y__\r\n#enddef", ((TechTalk.SpecFlow.Table)(null)), "And ");
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table13.AddRow(new string[] {
                        "Name",
                        "Macro2"});
            testRunner.And("I create a macro \"M2\" with the properties", ((string)(null)), table13, "And ");
            testRunner.And("I update the script of the macro \"M2\" to", "def __main():\r\n\treturn _macro.call(\'Macro1\', { \'X\':\'__A__\', \'Y\':\'__B__\' })\r\n#endd" +
                    "ef", ((TechTalk.SpecFlow.Table)(null)), "And ");
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table14.AddRow(new string[] {
                        "A",
                        "10.00"});
            table14.AddRow(new string[] {
                        "B",
                        "5.00"});
            testRunner.When("I execute the macro \"M2\" on ledger \"L\" into result \"MR\" with parameters", ((string)(null)), table14, "When ");
            testRunner.Then("the macro result \"MR\" is \"15.00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Macro - Define script - Add a transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Macro")]
        public virtual void Macro_DefineScript_AddATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Macro - Define script - Add a transaction", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            this.FeatureBackground();
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table15.AddRow(new string[] {
                        "Name",
                        "Macro1"});
            testRunner.Given("I create a macro \"M\" with the properties", ((string)(null)), table15, "Given ");
            testRunner.And("I update the script of the macro \"M\" to", "def __main():\r\n\tt = _ledger.T()\r\n\tt.D(\'100\', 5.00)\r\n\tt.D(\'200\', 5.00)\r\n\tt.C(\'300\'" +
                    ", 10.00)\r\n#enddef", ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.When("I execute the macro \"M\" on ledger \"L\" into result \"MR\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table16.AddRow(new string[] {
                        "1",
                        "5.00",
                        "",
                        ""});
            testRunner.Then("the content of the TAccount \"100\" on ledger \"MyLedger\" is", ((string)(null)), table16, "Then ");
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table17.AddRow(new string[] {
                        "1",
                        "5.00",
                        "",
                        ""});
            testRunner.And("the content of the TAccount \"200\" on ledger \"MyLedger\" is", ((string)(null)), table17, "And ");
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table18.AddRow(new string[] {
                        "",
                        "",
                        "10.00",
                        "1"});
            testRunner.And("the content of the TAccount \"300\" on ledger \"MyLedger\" is", ((string)(null)), table18, "And ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Macro - Define script - Add a transaction with parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Macro")]
        public virtual void Macro_DefineScript_AddATransactionWithParameters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Macro - Define script - Add a transaction with parameters", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            this.FeatureBackground();
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table19.AddRow(new string[] {
                        "Name",
                        "Macro1"});
            testRunner.Given("I create a macro \"M\" with the properties", ((string)(null)), table19, "Given ");
            testRunner.And("I update the script of the macro \"M\" to", "def __main():\r\n\tt = _ledger.T()\r\n\tt.__CD1__(\'100\', __Var1__)\r\n\tt.__CD2__(\'200\', _" +
                    "_Var2__)\r\n\tt.__CD3__(\'300\', __Var3__)\r\n#enddef", ((TechTalk.SpecFlow.Table)(null)), "And ");
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table20.AddRow(new string[] {
                        "Var1",
                        "5.00"});
            table20.AddRow(new string[] {
                        "CD1",
                        "D"});
            table20.AddRow(new string[] {
                        "Var2",
                        "5.00"});
            table20.AddRow(new string[] {
                        "CD2",
                        "D"});
            table20.AddRow(new string[] {
                        "Var3",
                        "10.00"});
            table20.AddRow(new string[] {
                        "CD3",
                        "C"});
            testRunner.When("I execute the macro \"M\" on ledger \"L\" into result \"MR\" with parameters", ((string)(null)), table20, "When ");
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table21.AddRow(new string[] {
                        "1",
                        "5.00",
                        "",
                        ""});
            testRunner.Then("the content of the TAccount \"100\" on ledger \"MyLedger\" is", ((string)(null)), table21, "Then ");
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table22.AddRow(new string[] {
                        "1",
                        "5.00",
                        "",
                        ""});
            testRunner.And("the content of the TAccount \"200\" on ledger \"MyLedger\" is", ((string)(null)), table22, "And ");
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table23.AddRow(new string[] {
                        "",
                        "",
                        "10.00",
                        "1"});
            testRunner.And("the content of the TAccount \"300\" on ledger \"MyLedger\" is", ((string)(null)), table23, "And ");
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
