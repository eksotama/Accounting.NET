// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AccountingNET.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class Macro_Operations_BelgiumFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Macro - Operations - Belgium", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Macro - Operations - Belgium")))
            {
                AccountingNET.Tests.Features.Macro_Operations_BelgiumFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table1.AddRow(new string[] {
                        "Name",
                        "MyLedger"});
            table1.AddRow(new string[] {
                        "Depth",
                        "4"});
            testRunner.Given("I create a ledger \"L\" with the properties", ((string)(null)), table1, "Given ");
            testRunner.And("I load t-accounts from file \"be_fr_pcmn_full.json\" on ledger \"L\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Macro - Operations - Belgium - Invoice (Buy)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Macro - Operations - Belgium")]
        public virtual void Macro_Operations_Belgium_InvoiceBuy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Macro - Operations - Belgium - Invoice (Buy)", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            this.FeatureBackground();
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table2.AddRow(new string[] {
                        "Name",
                        "M"});
            testRunner.Given("I create a macro \"M\" with the properties", ((string)(null)), table2, "Given ");
            testRunner.And("I update the script of the macro \"M\" to", "def __main():\r\n\t\r\n\ttotal = __TOTAL__\r\n\tbi = total / ( 1 + __VAT__ )\r\n\tvat = total" +
                    " - bi\r\n\r\n\tt = _ledger.T()\r\n\tt.D(\'2402\', bi)\r\n\tt.D(\'411\', vat)\r\n\tt.C(\'440\', total" +
                    ")\r\n\r\n\tt2 = _ledger.T()\r\n\tt2.D(\'440\', total)\r\n\tt2.C(\'550\', total)\r\n\r\n#enddef", ((TechTalk.SpecFlow.Table)(null)), "And ");
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table3.AddRow(new string[] {
                        "TOTAL",
                        "121.00"});
            table3.AddRow(new string[] {
                        "VAT",
                        "0.21"});
            testRunner.When("I execute the macro \"M\" on ledger \"L\" into result \"MR\" with parameters", ((string)(null)), table3, "When ");
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Trans",
                        "Debit",
                        "Credit",
                        "Debit Amount",
                        "Credit Amount"});
            table4.AddRow(new string[] {
                        "1",
                        "2402",
                        "",
                        "100.00",
                        ""});
            table4.AddRow(new string[] {
                        "1",
                        "411",
                        "",
                        "21.00",
                        ""});
            table4.AddRow(new string[] {
                        "1",
                        "",
                        "440",
                        "",
                        "121.00"});
            table4.AddRow(new string[] {
                        "2",
                        "440",
                        "",
                        "121.00",
                        ""});
            table4.AddRow(new string[] {
                        "2",
                        "",
                        "550",
                        "",
                        "121.00"});
            testRunner.Then("the content of ledger \"L\" is", ((string)(null)), table4, "Then ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Macro - Operations - Belgium - Invoice (Sell)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Macro - Operations - Belgium")]
        public virtual void Macro_Operations_Belgium_InvoiceSell()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Macro - Operations - Belgium - Invoice (Sell)", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            this.FeatureBackground();
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table5.AddRow(new string[] {
                        "Name",
                        "M"});
            testRunner.Given("I create a macro \"M\" with the properties", ((string)(null)), table5, "Given ");
            testRunner.And("I update the script of the macro \"M\" to", "def __main():\r\n\t\r\n\tht = __HT__\r\n\tvat = ht * __VAT__\r\n\ttotal = ht + vat\r\n\r\n\tt = _l" +
                    "edger.T()\r\n\tt.D(\'400\', total)\r\n\tt.C(\'700\', ht)\r\n\tt.C(\'451\', vat)\r\n\r\n\tt2 = _ledge" +
                    "r.T()\r\n\tt2.D(\'550\', total)\r\n\tt2.C(\'400\', total)\r\n\r\n#enddef", ((TechTalk.SpecFlow.Table)(null)), "And ");
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table6.AddRow(new string[] {
                        "HT",
                        "100.00"});
            table6.AddRow(new string[] {
                        "VAT",
                        "0.21"});
            testRunner.When("I execute the macro \"M\" on ledger \"L\" into result \"MR\" with parameters", ((string)(null)), table6, "When ");
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Trans",
                        "Debit",
                        "Credit",
                        "Debit Amount",
                        "Credit Amount"});
            table7.AddRow(new string[] {
                        "1",
                        "400",
                        "",
                        "121.00",
                        ""});
            table7.AddRow(new string[] {
                        "1",
                        "",
                        "451",
                        "",
                        "21.00"});
            table7.AddRow(new string[] {
                        "1",
                        "",
                        "700",
                        "",
                        "100.00"});
            table7.AddRow(new string[] {
                        "2",
                        "550",
                        "",
                        "121.00",
                        ""});
            table7.AddRow(new string[] {
                        "2",
                        "",
                        "400",
                        "",
                        "121.00"});
            testRunner.Then("the content of ledger \"L\" is", ((string)(null)), table7, "Then ");
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
