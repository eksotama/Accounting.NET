// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Accounting.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TransactionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Transaction", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Transaction")))
            {
                Accounting.Tests.Features.TransactionFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table1.AddRow(new string[] {
                        "Name",
                        "MyLedger"});
            table1.AddRow(new string[] {
                        "Depth",
                        "3"});
            testRunner.Given("I create a ledger \"L\" with the properties", ((string)(null)), table1, "Given ");
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table2.AddRow(new string[] {
                        "Ledger",
                        "MyLedger"});
            table2.AddRow(new string[] {
                        "Type",
                        "Assets"});
            table2.AddRow(new string[] {
                        "Number",
                        "100"});
            table2.AddRow(new string[] {
                        "Label",
                        "Account 100"});
            testRunner.Given("I create a TAccount \"T100\" with the properties", ((string)(null)), table2, "Given ");
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table3.AddRow(new string[] {
                        "Ledger",
                        "MyLedger"});
            table3.AddRow(new string[] {
                        "Type",
                        "Assets"});
            table3.AddRow(new string[] {
                        "Number",
                        "200"});
            table3.AddRow(new string[] {
                        "Label",
                        "Account 200"});
            testRunner.And("I create a TAccount \"T200\" with the properties", ((string)(null)), table3, "And ");
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table4.AddRow(new string[] {
                        "Ledger",
                        "MyLedger"});
            table4.AddRow(new string[] {
                        "Type",
                        "Assets"});
            table4.AddRow(new string[] {
                        "Number",
                        "300"});
            table4.AddRow(new string[] {
                        "Label",
                        "Account 300"});
            testRunner.And("I create a TAccount \"T300\" with the properties", ((string)(null)), table4, "And ");
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table5.AddRow(new string[] {
                        "Ledger",
                        "MyLedger"});
            table5.AddRow(new string[] {
                        "Type",
                        "Assets"});
            table5.AddRow(new string[] {
                        "Number",
                        "500"});
            table5.AddRow(new string[] {
                        "Label",
                        "Account 500"});
            testRunner.And("I create a TAccount \"T500\" with the properties", ((string)(null)), table5, "And ");
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table6.AddRow(new string[] {
                        "Ledger",
                        "MyLedger"});
            table6.AddRow(new string[] {
                        "Type",
                        "Assets"});
            table6.AddRow(new string[] {
                        "Number",
                        "501"});
            table6.AddRow(new string[] {
                        "Label",
                        "Account 501"});
            testRunner.And("I create a TAccount \"T501\" with the properties", ((string)(null)), table6, "And ");
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table7.AddRow(new string[] {
                        "Ledger",
                        "MyLedger"});
            table7.AddRow(new string[] {
                        "Type",
                        "Assets"});
            table7.AddRow(new string[] {
                        "Number",
                        "510"});
            table7.AddRow(new string[] {
                        "Label",
                        "Account 510"});
            testRunner.And("I create a TAccount \"T510\" with the properties", ((string)(null)), table7, "And ");
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table8.AddRow(new string[] {
                        "Ledger",
                        "MyLedger"});
            table8.AddRow(new string[] {
                        "Type",
                        "Assets"});
            table8.AddRow(new string[] {
                        "Number",
                        "511"});
            table8.AddRow(new string[] {
                        "Label",
                        "Account 511"});
            testRunner.And("I create a TAccount \"T511\" with the properties", ((string)(null)), table8, "And ");
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Transaction - Record a transaction - NF")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Transaction")]
        public virtual void Transaction_RecordATransaction_NF()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transaction - Record a transaction - NF", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            this.FeatureBackground();
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Debit",
                        "Credit",
                        "Amount Debit",
                        "Amount Credit"});
            table9.AddRow(new string[] {
                        "100",
                        "",
                        "50.00",
                        ""});
            table9.AddRow(new string[] {
                        "",
                        "200",
                        "",
                        "50.00"});
            testRunner.When("I record a transaction \"TRANS1\" on ledger \"MyLedger\"", ((string)(null)), table9, "When ");
            testRunner.Then("I receive this ok message: \"Transaction.Recorded.Ok\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And("the number of transactions on ledger \"MyLedger\" is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.And("the number of entries is \"2\" for transaction \"TRANS1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.And("the number of debit entries is \"1\" for transaction \"TRANS1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.And("the number of credit entries is \"1\" for transaction \"TRANS1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.And("the transaction \"TRANS1\" is balanced", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table10.AddRow(new string[] {
                        "1",
                        "50.00",
                        "",
                        ""});
            testRunner.And("the content of the TAccount \"100\" on ledger \"MyLedger\" is", ((string)(null)), table10, "And ");
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table11.AddRow(new string[] {
                        "",
                        "",
                        "50.00",
                        "1"});
            testRunner.And("the content of the TAccount \"200\" on ledger \"MyLedger\" is", ((string)(null)), table11, "And ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Transaction - Record a transaction - NF - Multiple accounts on debit side")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Transaction")]
        public virtual void Transaction_RecordATransaction_NF_MultipleAccountsOnDebitSide()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transaction - Record a transaction - NF - Multiple accounts on debit side", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            this.FeatureBackground();
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Debit",
                        "Credit",
                        "Amount Debit",
                        "Amount Credit"});
            table12.AddRow(new string[] {
                        "100",
                        "",
                        "25.00",
                        ""});
            table12.AddRow(new string[] {
                        "300",
                        "",
                        "25.00",
                        ""});
            table12.AddRow(new string[] {
                        "",
                        "200",
                        "",
                        "50.00"});
            testRunner.When("I record a transaction \"TRANS1\" on ledger \"MyLedger\"", ((string)(null)), table12, "When ");
            testRunner.Then("I receive this ok message: \"Transaction.Recorded.Ok\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And("the number of transactions on ledger \"MyLedger\" is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.And("the number of entries is \"3\" for transaction \"TRANS1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.And("the number of debit entries is \"2\" for transaction \"TRANS1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.And("the number of credit entries is \"1\" for transaction \"TRANS1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.And("the transaction \"TRANS1\" is balanced", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table13.AddRow(new string[] {
                        "1",
                        "25.00",
                        "",
                        ""});
            testRunner.And("the content of the TAccount \"100\" on ledger \"MyLedger\" is", ((string)(null)), table13, "And ");
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table14.AddRow(new string[] {
                        "1",
                        "25.00",
                        "",
                        ""});
            testRunner.And("the content of the TAccount \"300\" on ledger \"MyLedger\" is", ((string)(null)), table14, "And ");
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table15.AddRow(new string[] {
                        "",
                        "",
                        "50.00",
                        "1"});
            testRunner.And("the content of the TAccount \"200\" on ledger \"MyLedger\" is", ((string)(null)), table15, "And ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Transaction - Record a transaction - NF - Multiple accounts on credit side")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Transaction")]
        public virtual void Transaction_RecordATransaction_NF_MultipleAccountsOnCreditSide()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transaction - Record a transaction - NF - Multiple accounts on credit side", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            this.FeatureBackground();
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Debit",
                        "Credit",
                        "Amount Debit",
                        "Amount Credit"});
            table16.AddRow(new string[] {
                        "100",
                        "",
                        "50.00",
                        ""});
            table16.AddRow(new string[] {
                        "",
                        "200",
                        "",
                        "25.00"});
            table16.AddRow(new string[] {
                        "",
                        "300",
                        "",
                        "25.00"});
            testRunner.When("I record a transaction \"TRANS1\" on ledger \"MyLedger\"", ((string)(null)), table16, "When ");
            testRunner.Then("I receive this ok message: \"Transaction.Recorded.Ok\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And("the number of transactions on ledger \"MyLedger\" is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.And("the number of entries is \"3\" for transaction \"TRANS1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.And("the number of debit entries is \"1\" for transaction \"TRANS1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.And("the number of credit entries is \"2\" for transaction \"TRANS1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.And("the transaction \"TRANS1\" is balanced", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table17.AddRow(new string[] {
                        "1",
                        "50.00",
                        "",
                        ""});
            testRunner.And("the content of the TAccount \"100\" on ledger \"MyLedger\" is", ((string)(null)), table17, "And ");
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table18.AddRow(new string[] {
                        "",
                        "",
                        "25.00",
                        "1"});
            testRunner.And("the content of the TAccount \"200\" on ledger \"MyLedger\" is", ((string)(null)), table18, "And ");
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table19.AddRow(new string[] {
                        "",
                        "",
                        "25.00",
                        "1"});
            testRunner.And("the content of the TAccount \"300\" on ledger \"MyLedger\" is", ((string)(null)), table19, "And ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Transaction - Record multiple transactions - NF")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Transaction")]
        public virtual void Transaction_RecordMultipleTransactions_NF()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transaction - Record multiple transactions - NF", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            this.FeatureBackground();
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Debit",
                        "Credit",
                        "Amount Debit",
                        "Amount Credit"});
            table20.AddRow(new string[] {
                        "100",
                        "",
                        "50.00",
                        ""});
            table20.AddRow(new string[] {
                        "",
                        "200",
                        "",
                        "50.00"});
            testRunner.When("I record a transaction \"TRANS1\" on ledger \"MyLedger\"", ((string)(null)), table20, "When ");
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Debit",
                        "Credit",
                        "Amount Debit",
                        "Amount Credit"});
            table21.AddRow(new string[] {
                        "200",
                        "",
                        "25.00",
                        ""});
            table21.AddRow(new string[] {
                        "",
                        "100",
                        "",
                        "25.00"});
            testRunner.And("I record a transaction \"TRANS1\" on ledger \"MyLedger\"", ((string)(null)), table21, "And ");
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table22.AddRow(new string[] {
                        "1",
                        "50.00",
                        "25.00",
                        "2"});
            testRunner.Then("the content of the TAccount \"100\" on ledger \"MyLedger\" is", ((string)(null)), table22, "Then ");
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table23.AddRow(new string[] {
                        "2",
                        "25.00",
                        "50.00",
                        "1"});
            testRunner.And("the content of the TAccount \"200\" on ledger \"MyLedger\" is", ((string)(null)), table23, "And ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Transaction - Recorded transactions on sub-accounts are aggregated at upper level" +
            "s when in the same transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Transaction")]
        public virtual void Transaction_RecordedTransactionsOnSub_AccountsAreAggregatedAtUpperLevelsWhenInTheSameTransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transaction - Recorded transactions on sub-accounts are aggregated at upper level" +
                    "s when in the same transaction", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            this.FeatureBackground();
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Debit",
                        "Credit",
                        "Amount Debit",
                        "Amount Credit"});
            table24.AddRow(new string[] {
                        "500",
                        "",
                        "10.00",
                        ""});
            table24.AddRow(new string[] {
                        "501",
                        "",
                        "10.00",
                        ""});
            table24.AddRow(new string[] {
                        "510",
                        "",
                        "10.00",
                        ""});
            table24.AddRow(new string[] {
                        "511",
                        "",
                        "10.00",
                        ""});
            table24.AddRow(new string[] {
                        "",
                        "100",
                        "",
                        "40.00"});
            testRunner.Given("I record a transaction \"TRANS1\" on ledger \"MyLedger\"", ((string)(null)), table24, "Given ");
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table25.AddRow(new string[] {
                        "1",
                        "10.00",
                        "",
                        ""});
            table25.AddRow(new string[] {
                        "1",
                        "10.00",
                        "",
                        ""});
            testRunner.Then("the content of the TAccount \"50\" on ledger \"MyLedger\" is", ((string)(null)), table25, "Then ");
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table26.AddRow(new string[] {
                        "1",
                        "10.00",
                        "",
                        ""});
            table26.AddRow(new string[] {
                        "1",
                        "10.00",
                        "",
                        ""});
            testRunner.And("the content of the TAccount \"51\" on ledger \"MyLedger\" is", ((string)(null)), table26, "And ");
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table27.AddRow(new string[] {
                        "1",
                        "10.00",
                        "",
                        ""});
            table27.AddRow(new string[] {
                        "1",
                        "10.00",
                        "",
                        ""});
            table27.AddRow(new string[] {
                        "1",
                        "10.00",
                        "",
                        ""});
            table27.AddRow(new string[] {
                        "1",
                        "10.00",
                        "",
                        ""});
            testRunner.And("the content of the TAccount \"5\" on ledger \"MyLedger\" is", ((string)(null)), table27, "And ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Transaction - Recorded transactions on sub-accounts are aggregated at upper level" +
            "s when in different transactions on the same side")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Transaction")]
        public virtual void Transaction_RecordedTransactionsOnSub_AccountsAreAggregatedAtUpperLevelsWhenInDifferentTransactionsOnTheSameSide()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transaction - Recorded transactions on sub-accounts are aggregated at upper level" +
                    "s when in different transactions on the same side", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            this.FeatureBackground();
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Debit",
                        "Credit",
                        "Amount Debit",
                        "Amount Credit"});
            table28.AddRow(new string[] {
                        "500",
                        "",
                        "10.00",
                        ""});
            table28.AddRow(new string[] {
                        "",
                        "100",
                        "",
                        "10.00"});
            testRunner.Given("I record a transaction \"TRANS1\" on ledger \"MyLedger\"", ((string)(null)), table28, "Given ");
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Debit",
                        "Credit",
                        "Amount Debit",
                        "Amount Credit"});
            table29.AddRow(new string[] {
                        "501",
                        "",
                        "10.00",
                        ""});
            table29.AddRow(new string[] {
                        "",
                        "100",
                        "",
                        "10.00"});
            testRunner.And("I record a transaction \"TRANS2\" on ledger \"MyLedger\"", ((string)(null)), table29, "And ");
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Debit",
                        "Credit",
                        "Amount Debit",
                        "Amount Credit"});
            table30.AddRow(new string[] {
                        "510",
                        "",
                        "10.00",
                        ""});
            table30.AddRow(new string[] {
                        "",
                        "100",
                        "",
                        "10.00"});
            testRunner.And("I record a transaction \"TRANS3\" on ledger \"MyLedger\"", ((string)(null)), table30, "And ");
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Debit",
                        "Credit",
                        "Amount Debit",
                        "Amount Credit"});
            table31.AddRow(new string[] {
                        "511",
                        "",
                        "10.00",
                        ""});
            table31.AddRow(new string[] {
                        "",
                        "100",
                        "",
                        "10.00"});
            testRunner.And("I record a transaction \"TRANS4\" on ledger \"MyLedger\"", ((string)(null)), table31, "And ");
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table32.AddRow(new string[] {
                        "1",
                        "10.00",
                        "",
                        ""});
            table32.AddRow(new string[] {
                        "2",
                        "10.00",
                        "",
                        ""});
            testRunner.Then("the content of the TAccount \"50\" on ledger \"MyLedger\" is", ((string)(null)), table32, "Then ");
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table33.AddRow(new string[] {
                        "3",
                        "10.00",
                        "",
                        ""});
            table33.AddRow(new string[] {
                        "4",
                        "10.00",
                        "",
                        ""});
            testRunner.And("the content of the TAccount \"51\" on ledger \"MyLedger\" is", ((string)(null)), table33, "And ");
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table34.AddRow(new string[] {
                        "1",
                        "10.00",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "2",
                        "10.00",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "3",
                        "10.00",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "4",
                        "10.00",
                        "",
                        ""});
            testRunner.And("the content of the TAccount \"5\" on ledger \"MyLedger\" is", ((string)(null)), table34, "And ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Transaction - Recorded transactions on sub-accounts are aggregated at upper level" +
            "s when in different transactions on different sides")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Transaction")]
        public virtual void Transaction_RecordedTransactionsOnSub_AccountsAreAggregatedAtUpperLevelsWhenInDifferentTransactionsOnDifferentSides()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transaction - Recorded transactions on sub-accounts are aggregated at upper level" +
                    "s when in different transactions on different sides", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            this.FeatureBackground();
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Debit",
                        "Credit",
                        "Amount Debit",
                        "Amount Credit"});
            table35.AddRow(new string[] {
                        "500",
                        "",
                        "10.00",
                        ""});
            table35.AddRow(new string[] {
                        "",
                        "100",
                        "",
                        "10.00"});
            testRunner.Given("I record a transaction \"TRANS1\" on ledger \"MyLedger\"", ((string)(null)), table35, "Given ");
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Debit",
                        "Credit",
                        "Amount Debit",
                        "Amount Credit"});
            table36.AddRow(new string[] {
                        "100",
                        "",
                        "10.00",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "501",
                        "",
                        "10.00"});
            testRunner.And("I record a transaction \"TRANS2\" on ledger \"MyLedger\"", ((string)(null)), table36, "And ");
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Debit",
                        "Credit",
                        "Amount Debit",
                        "Amount Credit"});
            table37.AddRow(new string[] {
                        "510",
                        "",
                        "10.00",
                        ""});
            table37.AddRow(new string[] {
                        "",
                        "100",
                        "",
                        "10.00"});
            testRunner.And("I record a transaction \"TRANS3\" on ledger \"MyLedger\"", ((string)(null)), table37, "And ");
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Debit",
                        "Credit",
                        "Amount Debit",
                        "Amount Credit"});
            table38.AddRow(new string[] {
                        "100",
                        "",
                        "10.00",
                        ""});
            table38.AddRow(new string[] {
                        "",
                        "511",
                        "",
                        "10.00"});
            testRunner.And("I record a transaction \"TRANS4\" on ledger \"MyLedger\"", ((string)(null)), table38, "And ");
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table39.AddRow(new string[] {
                        "1",
                        "10.00",
                        "10.00",
                        "2"});
            testRunner.Then("the content of the TAccount \"50\" on ledger \"MyLedger\" is", ((string)(null)), table39, "Then ");
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table40.AddRow(new string[] {
                        "3",
                        "10.00",
                        "10.00",
                        "4"});
            testRunner.And("the content of the TAccount \"51\" on ledger \"MyLedger\" is", ((string)(null)), table40, "And ");
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransDebit",
                        "Debit",
                        "Credit",
                        "TransCredit"});
            table41.AddRow(new string[] {
                        "1",
                        "10.00",
                        "10.00",
                        "2"});
            table41.AddRow(new string[] {
                        "3",
                        "10.00",
                        "10.00",
                        "4"});
            testRunner.And("the content of the TAccount \"5\" on ledger \"MyLedger\" is", ((string)(null)), table41, "And ");
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
