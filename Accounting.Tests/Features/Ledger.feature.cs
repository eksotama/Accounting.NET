// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AccountingNET.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Ledger")]
    public partial class LedgerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Ledger", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Ledger - Create a ledger - NF")]
        public virtual void Ledger_CreateALedger_NF()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ledger - Create a ledger - NF", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table1.AddRow(new string[] {
                        "Name",
                        "Ledger1"});
            table1.AddRow(new string[] {
                        "Depth",
                        "3"});
            testRunner.When("I create a ledger \"L\" with the properties", ((string)(null)), table1, "When ");
            testRunner.Then("I receive this ok message: \"Ledger.Created.Ok\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Ledger - Create a ledger - Mandatory properties missing")]
        [NUnit.Framework.TestCaseAttribute("Name", "", "Ledger.Name.Empty", new string[0])]
        public virtual void Ledger_CreateALedger_MandatoryPropertiesMissing(string description, string name, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ledger - Create a ledger - Mandatory properties missing", exampleTags);
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table2.AddRow(new string[] {
                        "Name",
                        string.Format("{0}", name)});
            table2.AddRow(new string[] {
                        "Depth",
                        "3"});
            testRunner.When("I create a ledger \"L\" with the properties", ((string)(null)), table2, "When ");
            testRunner.Then(string.Format("I receive this error message: \"{0}\"", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Ledger - Create a ledger - Depth must be a positive number")]
        [NUnit.Framework.TestCaseAttribute("Zero", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Negative", "-1", new string[0])]
        public virtual void Ledger_CreateALedger_DepthMustBeAPositiveNumber(string description, string depth, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ledger - Create a ledger - Depth must be a positive number", exampleTags);
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table3.AddRow(new string[] {
                        "Name",
                        "Ledger1"});
            table3.AddRow(new string[] {
                        "Depth",
                        string.Format("{0}", depth)});
            testRunner.When("I create a ledger \"L\" with the properties", ((string)(null)), table3, "When ");
            testRunner.Then("I receive this error message: \"Ledger.Depth.MustBeAPositiveNumber\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
